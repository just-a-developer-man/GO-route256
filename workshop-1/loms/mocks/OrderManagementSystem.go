// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/just-a-developer-man/GO-route256/workshop-1/loms/internal/models"
	usecase "github.com/just-a-developer-man/GO-route256/workshop-1/loms/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// OrderManagementSystem is an autogenerated mock type for the OrderManagementSystem type
type OrderManagementSystem struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, userID, info
func (_m *OrderManagementSystem) CreateOrder(ctx context.Context, userID models.UserID, info usecase.CreateOrderInfo) (models.Order, error) {
	ret := _m.Called(ctx, userID, info)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, usecase.CreateOrderInfo) (models.Order, error)); ok {
		return rf(ctx, userID, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserID, usecase.CreateOrderInfo) models.Order); ok {
		r0 = rf(ctx, userID, info)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserID, usecase.CreateOrderInfo) error); ok {
		r1 = rf(ctx, userID, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderManagementSystem creates a new instance of OrderManagementSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderManagementSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderManagementSystem {
	mock := &OrderManagementSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
